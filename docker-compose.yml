services:
  synthetic-client-cursos:
    build:
      context: ./cliente-sintetico/
      dockerfile: Dockerfile
    image: synthetic-client-cursos
    container_name: synthetic-client-cursos
    restart: no
    environment:
      TARGET_URL_CONSULTA: http://api-cursos:8080/curso
      TARGET_URL_CURSO_CADASTRAR: http://api-cursos:8080/curso
      TARGET_URL_HEALTH: http://api-cursos:8080/curso
      URL_CONSULTA_DELETE: http://api-cursos:8080/curso
      URL_DELECAO: http://api-cursos:8080/curso/{id}
      URL_POR_ID: http://api-cursos:8080/curso/{id}
      TOKEN: seu_token_aqui
      INTERVAL_HEALTH: 30
      INTERVAL_CURSO_CADASTRAR: 10
      INTERVAL_DELETE: 120
      INTERVAL_CONSULTA: 5
      INTERVAL_POR_ID: 3
    networks:
      - api
    depends_on:
      - proxy-api-cursos
      - api-cursos
      - database-api-cursos
  proxy-api-cursos:
    build:
      context: ./nginx/
      dockerfile: Dockerfile
    image: proxy-api-cursos
    container_name: proxy-api-cursos
    restart: no
    volumes:
      - ./nginx/opentelemetry_module.conf:/etc/nginx/conf.d/opentelemetry_module.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/nginx.conf:/conf/nginx/nginx.conf
    ports:
      - 80:80
    networks:
      - public
      - api
    depends_on:
      - api-cursos
      - database-api-cursos
  api-cursos:
    image: api-cursos:latest
    build:
      context: .
      dockerfile: ./api-cursos/Dockerfile
      no_cache: true
    hostname: api-cursos
    container_name: api-cursos
    restart: no
    # ports:
    #   - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prd
      DATABASE_URL: database-api-cursos
      DATABASE_PORT: 5432
      URL_LOKI_LOG: http://loki-api-cursos:3100/loki/api/v1/push
      OPEN_TELEMETRY_URL: http://opentelemetry-collector-api-cursos:4318
      OPEN_TELEMETRY_TIMEOUT: 15s
      SPRING_REDIS_HOST: cache-api-cursos
    depends_on:
      - database-api-cursos
      - pgadmin4-cursos
      - cache-api-cursos
      - prometheus-api-cursos
      - loki-api-cursos
      - opentelemetry-collector-api-cursos
    networks:
      - api
      - monit
      - data
  database-api-cursos:
    image: "postgres:17.4-alpine3.21"
    container_name: database-api-cursos
    restart: no
    environment:
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=postgres"
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10
    # ports:
    #   - "5432:5432"
    volumes:
      - "database-api-cursos-conf:/etc/postgresql"
      - "database-api-cursos-data:/var/lib/postgresql/data"
      - "database-api-cursos-logs:/var/log"
    networks:
      - data
  pgadmin4-cursos:
    image: dpage/pgadmin4:9.1.0
    container_name: pgadmin4-cursos
    restart: no
    environment:
      - "PGADMIN_DEFAULT_EMAIL=user@domain.com"
      - "PGADMIN_DEFAULT_PASSWORD=112358"
    # ports:
    #   - "5050:80"
    volumes:
      - "pgadmin4-cursos-sessiondata:/var/lib/pgadmin"
      - "pgadmin4-cursos-conf:/pgadmin4/config_local.py"
      - "pgadmin4-cursos-serverdefinitions:/pgadmin4/servers.json"
    depends_on:
      - database-api-cursos
    networks:
      - data
  
  cache-api-cursos:
    image: redis:7.4.2-alpine
    container_name: cache-api-cursos
    restart: no
    volumes:
       - redis-cursos-data:/data
    # ports:
    #   - 6379:6379
    networks:
      - data
    depends_on:
      - database-api-cursos
      - pgadmin4-cursos

  redis-exporter-cursos:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter-cursos
    restart: no
    environment:
      REDIS_ADDR: "redis://cache-api-cursos:6379"
    # ports:
    #   - "9121:9121"
    networks:
      - data
      - monit
    depends_on:
      - cache-api-cursos

  prometheus-api-cursos:
    image: bitnami/prometheus:2.55.1-debian-12-r14
    user: "root:root"
    privileged: true
    container_name: prometheus-api-cursos
    restart: no
    volumes:
      - prometheus-cursos-data:/opt/bitnami/prometheus/data
      - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    networks:
      - monit
      - api
    depends_on:
      - database-api-cursos
  opentelemetry-collector-api-cursos:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: opentelemetry-collector-api-cursos
    command: ["--config=/etc/otel-collector-config.yaml"]
    restart: no
    # ports:
    #   - 1888:1888 # pprof extension
    #   - 8888:8888 # Prometheus metrics exposed by the Collector
    #   - 8889:8889 # Prometheus exporter metrics
    #   - 13133:13133 # health_check extension
    #   - 4317:4317 # OTLP gRPC receiver
    #   - 4318:4318 # OTLP http receiver
    #   - 55679:55679 # zpages extension
    volumes:
      - ./openTelemetry/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    networks:
      - monit
      - api
    depends_on:
      - jaeger-api-cursos
      - loki-api-cursos
  jaeger-api-cursos:
    image: jaegertracing/all-in-one:1.68.0
    container_name: jaeger-api-cursos
    restart: no
    command:
      - "--memory.max-traces=25000"
      - "--query.base-path=/jaeger/ui"
      - "--prometheus.query.normalize-calls=true"
      - "--prometheus.query.normalize-duration=true"
    ports:
    #   - "5775:5775"     # Jaeger agent
    #   - "6831:6831/udp" # UDP port for Jaeger agent
    #   - "6832:6832/udp" # Jaeger agent
    #   - "5778:5778"     # Jaeger query
    #   - "14269:14269"   # Jaeger query
    #   - "14250:14250"   # Jaeger collector gRPC
    #   - "14268:14268"   # HTTP port for spans
    #   - "5777:5777"     # Jaeger agent
      - "16686:16686"   # Web UI
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus-api-cursos:9090
    networks:
      - monit
  grafana-api-cursos:
    image: grafana/grafana-enterprise:11.5.2-ubuntu
    user: "root:root"
    container_name: grafana-api-cursos
    volumes:
      - grafana-cursos-storage:/var/lib/grafana
    restart: no
    ports:
      - '3000:3000'
    networks:
      - monit
    depends_on:
      - prometheus-api-cursos

  loki-api-cursos:
    image: grafana/loki:main-c515a4e
    container_name: loki-api-cursos
    volumes:
      - loki-cursos-data:/loki
    command: 
      - -config.file=/etc/loki/local-config.yaml
      - -print-config-stderr=true
    # ports:
    #   - 3100:3100
    networks:
      - api
      - monit
    depends_on:
      - grafana-api-cursos

volumes:
  pgadmin4-cursos-sessiondata:
  pgadmin4-cursos-conf:
  pgadmin4-cursos-serverdefinitions:
  database-api-cursos-conf:
  database-api-cursos-data:
  database-api-cursos-logs:
  prometheus-cursos-data:
  grafana-cursos-storage:
  loki-cursos-data:
  redis-cursos-data:

networks:
  public:
  monit:
  data:
  api: