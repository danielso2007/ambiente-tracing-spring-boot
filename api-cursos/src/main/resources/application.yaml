server:
  port: ${SPRING_API_PORT:8080}
logging:
  level:
    root: INFO
    org:
      springframework: INFO
      ch:
        qos:
          logback: OFF
spring:
  profiles:
    active: prd
  main:
    banner-mode: "console"
  cache:
    type: redis
    redis:
      enable-statistics: true
      time-to-live: '60000'
    cache-names: 'nomeCurso,listaDeCursos'
  data:
    redis:
      host: '${SPRING_REDIS_HOST:localhost}'
      port: '6379'
  datasource:
    url: 'jdbc:postgresql://${DATABASE_URL:localhost}:${DATABASE_PORT:5432}/cursosdb'
    username: postgres
    password: postgres
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: false
        dialect: org.hibernate.dialect.PostgreSQLDialect
  sql:
    init:
      platform: postgres
      mode: always
      continue-on-error: true
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: 'health,info,metrics,prometheus'
  metrics:
    use-global-registry: true
    enable:
      jvm: true
    distribution:
      slo:
        http: '5ms,10ms,25ms,50ms,100ms,200ms,300ms,400ms,500ms,1s,2s,5s,10s,15s,20s,25s,30s'
    tags:
      application: '@project.name@'
  prometheus:
    metrics:
      export:
        enabled: true
info:
  app:
    name: '@project.name@'
    description: '@project.description@'
    version: '@project.version@'
    encoding: '@project.build.sourceEncoding@'
    java:
      version: '@java.version@'
otel:
  resource:
    attributes:
      service:
        name: '@project.name@'
  exporter:
    otlp:
      endpoint: ${OPEN_TELEMETRY_URL}
      timeout: ${OPEN_TELEMETRY_TIMEOUT}
  traces:
    sampler:
      probability: 1.0